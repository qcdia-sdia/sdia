apiVersion: v1
kind: ConfigMap
metadata:
  name: awx-config
  namespace: lw
data:

  SECRET_KEY: |
    aabbcc


  environment.sh: |
    DATABASE_USER=awx
    DATABASE_NAME=awx
    DATABASE_HOST=postgres
    DATABASE_PORT=5432
    DATABASE_PASSWORD=awxpass
    AWX_ADMIN_USER=admin
    AWX_ADMIN_PASSWORD=password

  credentials.py: |
    DATABASES = {
        'default': {
            'ATOMIC_REQUESTS': True,
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': "awx",
            'USER': "awx",
            'PASSWORD': "awxpass",
            'HOST': "postgres",
            'PORT': "5432",
        }
    }

    BROKER_URL = 'redis://redis:6379'

    BROADCAST_WEBSOCKET_SECRET = "R3M1V2I6TUY4MVptRmxQOnNaTy13SHdmNyxwQk5NZExvOUJQRkFDN181RmFDenZTRVFJci1oZDlBVzVCaUVkbS4wQ2I4QUdGQWk6S1hMdEgtZGx4U25DaTBvLmsxekNZUURROGN3MGtZOjFVa1NsVXAxTUJyRFI5T3JvZXYuTCw="


  settings.py: |
    # AWX settings file

    import os


    def get_secret():
        if os.path.exists("/etc/tower/SECRET_KEY"):
            return open('/etc/tower/SECRET_KEY', 'rb').read().strip()

    BROKER_URL = 'redis://redis:6379'
    ADMINS = ()

    STATIC_ROOT = '/var/lib/awx/public/static'

    PROJECTS_ROOT = '/var/lib/awx/projects'

    AWX_ANSIBLE_COLLECTIONS_PATHS = '/var/lib/awx/vendor/awx_ansible_collections'

    JOBOUTPUT_ROOT = '/var/lib/awx/job_status'

    SECRET_KEY = get_secret()

    ALLOWED_HOSTS = ['*']

    # Container environments don't like chroots
    AWX_PROOT_ENABLED = False


    CLUSTER_HOST_ID = "awx-task"
    SYSTEM_UUID = '00000000-0000-0000-0000-000000000000'

    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False

    ###############################################################################
    # EMAIL SETTINGS
    ###############################################################################

    SERVER_EMAIL = 'root@localhost'
    DEFAULT_FROM_EMAIL = 'webmaster@localhost'
    EMAIL_SUBJECT_PREFIX = '[AWX] '

    EMAIL_HOST = 'localhost'
    EMAIL_PORT = 25
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    EMAIL_USE_TLS = False

    LOGGING['handlers']['console'] = {
        '()': 'logging.StreamHandler',
        'level': 'DEBUG',
        'formatter': 'simple',
    }

    LOGGING['loggers']['django.request']['handlers'] = ['console']
    LOGGING['loggers']['rest_framework.request']['handlers'] = ['console']
    LOGGING['loggers']['awx']['handlers'] = ['console', 'external_logger']
    LOGGING['loggers']['awx.main.commands.run_callback_receiver']['handlers'] = ['console']
    LOGGING['loggers']['awx.main.tasks']['handlers'] = ['console', 'external_logger']
    LOGGING['loggers']['awx.main.scheduler']['handlers'] = ['console', 'external_logger']
    LOGGING['loggers']['django_auth_ldap']['handlers'] = ['console']
    LOGGING['loggers']['social']['handlers'] = ['console']
    LOGGING['loggers']['system_tracking_migrations']['handlers'] = ['console']
    LOGGING['loggers']['rbac_migrations']['handlers'] = ['console']
    LOGGING['loggers']['awx.isolated.manager.playbooks']['handlers'] = ['console']
    LOGGING['handlers']['callback_receiver'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['task_system'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['tower_warnings'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['rbac_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['system_tracking_migrations'] = {'class': 'logging.NullHandler'}
    LOGGING['handlers']['management_playbooks'] = {'class': 'logging.NullHandler'}

    DATABASES = {
        'default': {
            'ATOMIC_REQUESTS': True,
            'ENGINE': 'awx.main.db.profiled_pg',
            'NAME': os.getenv("DATABASE_NAME", None),
            'USER': os.getenv("DATABASE_USER", None),
            'PASSWORD': os.getenv("DATABASE_PASSWORD", None),
            'HOST': os.getenv("DATABASE_HOST", None),
            'PORT': os.getenv("DATABASE_PORT", None),
        }
    }


    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [("redis", 6379)],
            },
        },
    }


    if os.getenv("DATABASE_SSLMODE", False):
        DATABASES['default']['OPTIONS'] = {'sslmode': os.getenv("DATABASE_SSLMODE")}

    USE_X_FORWARDED_HOST = True
    USE_X_FORWARDED_PORT = True

