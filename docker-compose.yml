version: '3'
services:

  nginx:
    image: nginx
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./cert.pem:/etc/nginx/cert.pem
      - ./privkey.pem:/etc/nginx/privkey.pem
      - ./htpasswd:/etc/nginx/htpasswd
    ports:
    - "80:80"
    - "443:443"

  rabbit:
    restart: unless-stopped
    image: rabbitmq:3.8-management
    ports:
      - "5671-5672:5671-5672"
      - "15672:15672"
      - "4369:4369"
      - "15671:15671"

  mysql:
    restart: unless-stopped
    image: mysql:5.7
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
      MYSQL_DATABASE: semaphore
      MYSQL_USER: semaphore
      MYSQL_PASSWORD: semaphore
    volumes:
        - ./mysql.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
    ports:
      - "3306:3306"

  semaphore:
    restart: unless-stopped
    image: qcdis/docker_ansible_semaphore:v2.5.1-2.9.9
    environment:
      SEMAPHORE_DB_USER: semaphore
      SEMAPHORE_DB_PASS: semaphore
      SEMAPHORE_DB_HOST: mysql
      SEMAPHORE_DB_PORT: 3306
      SEMAPHORE_DB: semaphore
      SEMAPHORE_PLAYBOOK_PATH: /etc/semaphore
      SEMAPHORE_ADMIN_PASSWORD: password
      SEMAPHORE_ADMIN_NAME: "Developer"
      SEMAPHORE_ADMIN_EMAIL: admin@localhost
      SEMAPHORE_ADMIN: admin
      SEMAPHORE_WEB_ROOT: http://0.0.0.0:3000
    ports:
      - "3000:3000"
    depends_on:
      - mysql


  mongo:
    restart: unless-stopped
    image: mongo:4
    ports:
      - "27017:27017"

  mongo-express:
    restart: unless-stopped
    image: mongo-express
    environment:
        - ME_CONFIG_MONGODB_SERVER=mongo
        - ME_CONFIG_MONGODB_PORT=27017
        - ME_CONFIG_BASICAUTH_USERNAME=user
        - ME_CONFIG_BASICAUTH_PASSWORD=pass
        - ME_CONFIG_SITE_BASEURL=/mongo-express
        - VCAP_APP_PORT=8082
    depends_on:
        - mongo
    ports:
        - "8082:8082"


  orchestrator:
    restart: unless-stopped
    depends_on:
      - rabbit
      - mongo
      - sure-tosca
    image: qcdis/sdia-orchestrator
    environment:
      RABBITMQ_HOST: rabbit
      MONGO_HOST: mongo
      SURE_TOSCA_BASE_PATH: http://sure-tosca:8081/tosca-sure/1.0.0
      CREDENTIAL_SECRET: top_secret
    ports:
      - "8080:8080"

  sure-tosca:
    restart: unless-stopped
    image: qcdis/sure-tosca
    ports:
      - "8081:8081"

  planner:
    restart: unless-stopped
    depends_on:
      - rabbit
      - sure-tosca
    image: qcdis/sdia-infrastructure-planner
    environment:
      RABBITMQ_HOST: rabbit


  provisioner:
    restart: unless-stopped
    depends_on:
      - rabbit
      - sure-tosca
    image: qcdis/sdia-provisioner
    environment:
      RABBITMQ_HOST: rabbit
      SURE_TOSCA_BASE_PATH: http://sure-tosca:8081/tosca-sure/1.0.0
      CLOUD_STORM_SECRET: 456
      CREDENTIAL_SECRET: top_secret


  deployer:
    restart: unless-stopped
    depends_on:
      - rabbit
      - sure-tosca
    image: qcdis/sdia-deployer
    environment:
      RABBITMQ_HOST: rabbit
      SURE_TOSCA_BASE_PATH: http://sure-tosca:8081/tosca-sure/1.0.0
      SEMAPHORE_BASE_PATH: http://semaphore:3000/api
      AWX_BASE_PATH: http://web:8052/api/v2


#  web:
#    image: ansible/awx:15.0.1
#    container_name: awx_web
#    depends_on:
#      - redis
#      - postgres
#    ports:
#      - "8052:8052"
#    hostname: web
#    user: root
#    restart: unless-stopped
#    volumes:
#      - "./SECRET_KEY:/etc/tower/SECRET_KEY"
#      - "./environment.sh:/etc/tower/conf.d/environment.sh"
#      - "./credentials.py:/etc/tower/conf.d/credentials.py"
#      - "./nginx.conf:/etc/nginx/nginx.conf:ro"
#      - "./redis_socket:/var/run/redis/:rw"

#  task:
#    image: ansible/awx:15.0.1
#    container_name: awx_task
#    depends_on:
#      - redis
#      - web
#      - postgres
#    command: /usr/bin/launch_awx_task.sh
#    hostname: awx
#    user: root
#    restart: unless-stopped
#    volumes:
#      - "./SECRET_KEY:/etc/tower/SECRET_KEY"
#      - "./environment.sh:/etc/tower/conf.d/environment.sh"
#      - "./credentials.py:/etc/tower/conf.d/credentials.py"
#      - "./redis_socket:/var/run/redis/:rw"
#    environment:
#      SUPERVISOR_WEB_CONFIG_PATH: '/etc/supervisord.conf'
#
#  redis:
#    image: redis
#    container_name: awx_redis
#    restart: unless-stopped
#    command: ["/usr/local/etc/redis/redis.conf"]
#    volumes:
#      - "./redis.conf:/usr/local/etc/redis/redis.conf:ro"
#      - "./redis_socket:/var/run/redis/:rw"
#
#
#  postgres:
#    image: postgres:10
#    container_name: awx_postgres
#    restart: unless-stopped
#    environment:
#      POSTGRES_USER: awx
#      POSTGRES_PASSWORD: awxpass
#      POSTGRES_DB: awx
